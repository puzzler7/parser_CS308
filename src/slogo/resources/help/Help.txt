Command Support for SLogo
Details of all possible commands are specified below

TURTLE COMMANDS

Location: Commands specific to the changing and retrieving of the turtle's location
         command syntax: setxy x y OR goto x y -> move the turtle to a specific point (x,y)
                         forward pixels  OR  fd pixels -> moves the turtle forward by a number of pixels in its current heading
                         back pixels OR bk pixels -> moves the turtle backward by a number of pixels in its current heading
                         home -> moves turtle to the center of the screen defined as (0,0)
                         clearscreen OR cs -> erases turtle's trails and sends it to the home position defined as (0,0)
                         xcor -> returns the turtle's X coordinate from the center of the screen
                         ycor -> returns the turtle's Y coordinate from the center of the screen

Rotation: Commands specific to the rotation of the turtle
         command syntax: right degrees  OR rt degrees  -> clockwise rotation
                         left degrees OR lt degrees -> counterclockwise rotation

Heading: Commands specific to the direction in which the turtle is facing
         command syntax: heading -> returns current heading of turtle
                         setheading degrees OR seth degrees -> change current heading
                         towards x y -> turns the turtle to face a specific point (x,y)

Hide/Show trail: Commands specific to the drawing created by turtle movement
         command syntax: pendown OR pd  -> draw trail when turtle moves
                         penup OR pu -> turtle does not leave a trail
                         pendown? OR pendownp -> returns 1 when pen is up, 0 otherwise

Hide/Show turtle: Commands specific to turtle visibility on the screen
         command syntax: showturtle OR st -> makes turtle visible
                         hideturtle OR ht -> makes turtle invisible
                         showing? OR showingp -> returns 1 if turtle is showing, 0 if it is hiding


MATHEMATICAL OPERATIONS

Addition : returns sum of the values of expr1 and expr2
         command syntax: SUM expr1 expr2
                         + expr1 expr2

Subtraction : returns difference of the values of expr1 and expr2
         command syntax: DIFFERENCE expr1 expr2
                         - expr1 expr2

Multiplication: returns product of the values of expr1 and expr2
         command syntax: PRODUCT expr1 expr2
                         * expr1 expr2

Quotient: returns quotient of the values of expr1 and expr2
         command syntax: QUOTIENT expr1 expr2
                         / expr1 expr2

Remainder: returns remainder on dividing the values of expr1 by expr2
         command syntax: REMAINDER expr1 expr2
                         % expr1 expr2

Negation: returns negative of the values of expr
         command syntax: MINUS expr
                         ~ expr

Random number generation: returns random non-negative number strictly less than max
         command syntax: RANDOM max

Trigonometric functions: Compute trigonometric calculations on a input degrees
         command syntax: SIN degrees -> returns sine of degrees
                         COS degrees -> return cosine of degrees
                         TAN degrees -> returns tangent of degrees
                         ATAN degrees -> returns arctangent of degrees

Natural logarithm: returns natural log of expr
         command syntax: LOG expr

Exponential: returns base raised to the power of the exponent
         command syntax: POW base exponent

PI: Reports the number Pi
    command syntax: PI


BOOLEAN OPERATIONS

Less Than: returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0
         command syntax: LESS? expr1 expr2
                         LESSP expr1 expr2

Greater Than: returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0
         command syntax: GREATER? expr1 expr2
                         GREATERP expr1 expr2

Equality: returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0
         command syntax: EQUAL? expr1 expr2
                         EQUALP expr1 expr2

Inequality: returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0
         command syntax: NOTEQUAL? expr1 expr2
                         NOTEQUALP expr1 expr2

Non-Zero Comparison: comparisons on the non-zero properties of inputs
         command syntax: AND test1 test2 -> returns 1 if test1 and test2 are non-zero, otherwise 0
                         OR test1 test2 -> returns 1 if test1 or test2 are non-zero, otherwise 0
                         NOT test -> returns 1 if test is 0 and 0 if test is non-zero


VARIABLES, CONTROL STRUCTURES, AND USER-DEFINED COMMANDS

Create and Assign variables: assigns the value of expr to variable, creating the variable if necessary
         command syntax: MAKE variable expr
                         SET variable expr

Loops: Allows for the repetition of commands
         command syntax: REPEAT expr [ command(s) ] -> runs command(s) given in the list the value of expr number of times
                         DOTIMES [variable limit] [ command(s) ] -> runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive
                         FOR [variable start end increment] [ command(s) ] -> runs command(s) for each value specified in the range, i.e., from (start - end), going by increment

Conditionals: Allow for execution of commands based on certain logic
         command syntax: IF expr [ command(s) ] -> if expr is not 0, runs the command(s) given in the list
                         IFELSE expr [ trueCommand(s) ] [ falseCommand(s) ] -> if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list

User Defined command: assigns command(s) given in the second list to commandName using parameters given in first list as variables
                    : when commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed)
                    : returns 1 if command is successfully defined, otherwise 0
        command syntax: TO commandName [ variable(s) ] [ command(s) ]